Aluno: Diogo Oliveira Neiss
Matrícula: 649651
Seminários II

ÍNDICE

    * Resultados
    * Conclusões
    * Mergesort seq e paralelo
    * Quicksort seq e paralelo
    * tabelas de log do mergesort
    * tabelas de log do quicksort

Todos os códigos fontes podem ser encontrados em meu github pessoal.
https://github.com/diogoneiss/ComputacaoParalela/tree/master

Dados médios, considernado um array de 10000 elementos aleatorios

                |Sequencial     | Paralelo, no melhor caso  |  Speedup
                |_______________|___________________________|_____________
    Quicksort   |  0.006314     | 0.000606                  |  ~90,4%
                |_______________|___________________________|__________
    MergeSort   |  0.0065159800 | 0.000869                  |  ~86,6%

Produzi, através de dois arquivos, logs de cada combinação de thread e nested, além de um arquivo com os melhores resultados para vetores aleatórios. Realizei diversas
execuções para conferir a consistência do código.

Para atingir a paralelização, utilizei OMP tasks, uma vez que as sections produziram diversos bugs e problemas de sincronização, que as tasks se mostraram
bem mais eficientes em remover.

Colarei aqui resultados dos dois códigos, iniciando pelo MergeSort e quicksort, com os códigos a seguir e, por último, o arquivo log.
Os arquivos de log podem ser produzidos na sua máquina, apenas variando o tamanho do array e recompilando o codigo sucessivas vezes.

//mergesort Sequencial

    Tempo médio de execução, para 10 000 elementos no array
    Tempo: 0.0065159800

//mergesort paralelo

    O trecho de texto abaixo foi gerado pelo programa, através de um fopen com "a", mostrando os melhores parâmetros.
    Iniciando mais uma iteração do programa, visando comparar resultados.
            Tamanho do array de elementos aleatorios: [1000000]
            Melhor tempo: 0.063580	Threads: 12	Nested: 5	Stop: 10
            Iniciando mais uma iteração do programa, visando comparar resultados.
            Tamanho do array de elementos aleatorios: [100000]
            Melhor tempo: 0.007579	Threads: 12	Nested: 2	Stop: 10
            Iniciando mais uma iteração do programa, visando comparar resultados.
            Tamanho do array de elementos aleatorios: [10000]
            Melhor tempo: 0.000869	Threads: 3	Nested: 10	Stop: 10
            Iniciando mais uma iteração do programa, visando comparar resultados.
            Tamanho do array de elementos aleatorios: [1000]
            Melhor tempo: 0.000105	Threads: 6	Nested: 10	Stop: 10
            Iniciando mais uma iteração do programa, visando comparar resultados.
            Tamanho do array de elementos aleatorios: [100]
            Melhor tempo: 0.000018	Threads: 1	Nested: 10	Stop: 10
            Iniciando mais uma iteração do programa, visando comparar resultados.
            Tamanho do array de elementos aleatorios: [10]
            Melhor tempo: 0.000006	Threads: 1	Nested: 5	Stop: 10
            Iniciando mais uma iteração do programa, visando comparar resultados.
            Tamanho do array de elementos aleatorios: [100000]
            Melhor tempo: 0.008410	Threads: 12	Nested: 2	Stop: 10

    Os resultados paralelos foram imensamente melhores que o sequencial. Para o array de 10000 elementos, "Threads: 3	Nested: 10	Stop: 10" se mostrou
    a melhor configuração.

//quickort sequencial
    Tempo de execução medio para 10 000 elementos
    Tempo de execução: 0.005845

//quicksort paralelo

            Dados para um array de tamanho 1000000:
            Melhor tempo: [0.049489]
            Melhores parâmetros: Threads: [1000]	Nested: [50]	Stop: [1000]
            Dados para um array de tamanho 100000:
            Melhor tempo: [0.004413]
            Melhores parâmetros: Threads: [7]	Nested: [6]	Stop: [500]
            Dados para um array de tamanho 10000:
            Melhor tempo: [0.000606]
            Melhores parâmetros: Threads: [7]	Nested: [1]	Stop: [7]
            Dados para um array de tamanho 1000:
            Melhor tempo: [0.000061]
            Melhores parâmetros: Threads: [7]	Nested: [6]	Stop: [31]
            Dados para um array de tamanho 100:
            Melhor tempo: [0.000006]
            Melhores parâmetros: Threads: [1]	Nested: [3]	Stop: [1]
            Dados para um array de tamanho 10:
            Melhor tempo: [0.000001]
            Melhores parâmetros: Threads: [3]	Nested: [12]	Stop: [1]
            Dados para um array de tamanho 10000:
            Melhor tempo: [0.000519]
            Melhores parâmetros: Threads: [3]	Nested: [1]	Stop: [500]

    Assim como no mergesort, os resultados foram muito bons, com um speedup altíssimo. A melhor configuração para o array de 10 000 elementos 
    foi Threads: [3]  Nested: [1]   Stop: [500]


Agora, abaixo colocarei os códigos para os 4 algoritmos.

    /**
    * Mergesort sequencial
    * @author Diogo Neiss
    * @date nov 2019
    */ 
    #include <stdio.h>
    #include <omp.h>
    #include <time.h>
    #include <stdlib.h>
    #define SIZE_ARRAY 10000
    //tamanho do array
    void mergesort(int arr[], int size);
    void Merge(int vec[], int vecSize);
    int IsSorted(int *array, int size);


    int main(int argc, char** argv) {


        int* arr = (int*) malloc(SIZE_ARRAY * sizeof(int));

    //semente aleatoria
        srand(time(NULL));

        for (int i = 0; i < SIZE_ARRAY; i++)
            arr[i] = rand()%SIZE_ARRAY;

    //int arr[] = {6, 7 , 1 , 5 , 6 ,11, 3, 14, 9, 5};
        double start, end;

        start = omp_get_wtime();
        mergesort(arr, SIZE_ARRAY);
        end = omp_get_wtime();

        printf("Tempo: %.10f\n", end - start);

        if(IsSorted(arr, SIZE_ARRAY) == 1)
            printf("Resultado: ordenado!\n");
        else
            printf("Resultado: N�O ordenado!\n");

        return 0;
    }

    void mergesort(int arr[], int size) {
        int mid;
        if(size > 1) {
            mid = size / 2;
            mergesort(arr, mid);
            mergesort(arr + mid, size - mid);
            Merge(arr, size);
        }
    }

    void Merge(int vec[], int vecSize) {
        int mid;
        int i, j, k;
        int* tmp;

        tmp = (int*) malloc(vecSize * sizeof(int));
        if (!tmp)
            exit(1);

        mid = vecSize / 2;

        i = 0;
        j = mid;
        k = 0;

        while (i < mid && j < vecSize) {
            if (vec[i] < vec[j])
                tmp[k] = vec[i++];
            else
                tmp[k] = vec[j++];
            ++k;
        }

        if (i == mid)
            while (j < vecSize)
                tmp[k++] = vec[j++];
        else
            while (i < mid)
                tmp[k++] = vec[i++];

        for (i = 0; i < vecSize; ++i)
            vec[i] = tmp[i];

        free(tmp);
    }

    int IsSorted(int *array, int size) {
        int i, value = 0;
        for(i = 1; i < size; i++)
            if(array[i-1] > array[i])
                return 0;
        return 1;
    }

    /**
    * Mergesort paralelo
    * @author Diogo Neiss
    * @date nov 2019
    */ 
    #include <stdio.h>
    #include <omp.h>
    #include <time.h>
    #include <stdlib.h>
    #define SIZE_ARRAY 100000

    int main(int argc, char **argv);
    void preencherArray(int *arr);
    void mergesort_serial(int arr[], int size);
    void printarArray(int *arr);
    void mergesort_parallel(int arr[], int size, int threads, int stop);
    void Merge(int vec[], int vecSize);
    int IsSorted(int *array, int size);

    int main(int argc, char **argv)
    {

        //arquivos com os resultados e logs
        FILE *arquivoLog = fopen("logMergesort.txt", "a");
        FILE *resultadosComparacao = fopen("resultadosMergesort.txt", "a");
        fprintf(resultadosComparacao, "Iniciando mais uma iteração do programa, visando comparar resultados.\nTamanho do array de elementos aleatorios: [%d]\n", SIZE_ARRAY);

        int *arr = (int *)malloc(SIZE_ARRAY * sizeof(int));

        //int arr[] = {6, 7 , 1 , 5 , 6 ,11, 3, 14, 9, 5};
        double start, end, exec;
        int stop = 10;
        int threads;
        int nested;

        //array para armazenar melhores execuções
        int melhoresExecucoes[3];
        double melhorTempo = 100;

        //for variando os diferentes valores de nested e threads
        for (nested = 10; nested > 0; nested /= 2)
        {
            for (threads = 100; threads > 0; threads /= 2)
            {
                preencherArray(arr);
                omp_set_num_threads(threads);
                omp_set_nested(nested);

                start = omp_get_wtime();
    #pragma omp parallel
    #pragma omp single
                mergesort_parallel(arr, SIZE_ARRAY, threads, stop);

                end = omp_get_wtime();

                exec = end - start;
                //armazenamento do melhor tempo
                if (exec < melhorTempo)
                {
                    melhorTempo = exec;
                    melhoresExecucoes[0] = threads;
                    melhoresExecucoes[1] = nested;
                    melhoresExecucoes[2] = stop;
                }
                printf("Tempo: %.10f\tThreads: %d\tNested: %d\n", exec, threads, nested);
                fprintf(arquivoLog, "Tempo: %.10f\tThreads: %d\tNested: %d\n", exec, threads, nested);
            }
        }
        //printarArray(arr);

        if (IsSorted(arr, SIZE_ARRAY) == 1)
            printf("Resultado: ordenado!\n");
        else
            printf("Resultado: NÃO ordenado!\n");

        printf("Melhor tempo: %lf\tThreads: %d\tNested: %d\tStop: %d\n", melhorTempo, melhoresExecucoes[0], melhoresExecucoes[1], melhoresExecucoes[2]);
        fprintf(resultadosComparacao, "Melhor tempo: %lf\tThreads: %d\tNested: %d\tStop: %d\n", melhorTempo, melhoresExecucoes[0], melhoresExecucoes[1], melhoresExecucoes[2]);

        fclose(resultadosComparacao);
        fclose(arquivoLog);
        return 0;
    }
    //funcao parar preencher o array com valores aleatorios
    void preencherArray(int *arr)
    {
        //semente aleatoria
        srand(time(NULL));

        for (int i = 0; i < SIZE_ARRAY; i++)
            arr[i] = rand() % SIZE_ARRAY;
    }

    void mergesort_serial(int arr[], int size)
    {
        int mid;
        if (size > 1)
        {
            mid = size / 2;
            mergesort_serial(arr, mid);
            mergesort_serial(arr + mid, size - mid);
        }

        Merge(arr, size);
    }
    void printarArray(int *arr)
    {
        printf("[");
        for (int i = 0; i < SIZE_ARRAY; i++)
            printf(" %d", arr[i]);

        printf("]\n");
    }

    void mergesort_parallel(int arr[], int size, int threads, int stop)
    {
        int mid;
        if (size > 1)
        {
            //uso esse contador para decidir se ser� paralelizado ou nao
            if (stop > 1)
            {
                mid = size / 2;
    #pragma omp task
                mergesort_parallel(arr, mid, threads, stop / 2);
    #pragma omp task
                mergesort_parallel(arr + mid, size - mid, threads, stop - stop / 2);
                //eseperar as tasks serem concluidas para continuar em frente
    #pragma omp taskwait
                Merge(arr, size);
            }
            else
                mergesort_serial(arr, size);
        }
    }

    void Merge(int vec[], int vecSize)
    {
        int mid;
        int i, j, k;
        int *tmp;

        tmp = (int *)malloc(vecSize * sizeof(int));
        if (!tmp)
            exit(1);

        mid = vecSize / 2;

        i = 0;
        j = mid;
        k = 0;

        while (i < mid && j < vecSize)
        {
            if (vec[i] < vec[j])
                tmp[k] = vec[i++];
            else
                tmp[k] = vec[j++];
            ++k;
        }

        if (i == mid)
            while (j < vecSize)
                tmp[k++] = vec[j++];
        else
            while (i < mid)
                tmp[k++] = vec[i++];

        for (i = 0; i < vecSize; ++i)
            vec[i] = tmp[i];

        free(tmp);
    }

    int IsSorted(int *array, int size)
    {
        int i, value = 0;
        for (i = 1; i < size; i++)
            if (array[i - 1] > array[i])
                return 0;
        return 1;
    }

//agora virá o codigo do quicksort.

    /**
    * Quicksort sequencial
    * @author Diogo Neiss
    * @date nov 2019
    */ 

    #include <stdio.h>
    #include <omp.h>
    #include <time.h>
    #include <stdlib.h>

    void swap(int *a, int i, int j);
    int partition(int *a, int left, int right, int pivot);
    void quickSequential(int *a, int left, int right);
    int IsSort(int *array, int size);

    int main(int argc, char **argv)
    {
        int size = 10000, i, *array;

        array = malloc(size * sizeof(int));
        srand(time(NULL));
        for (i = 0; i < size; i++)
            array[i] = rand() % size;
        double start, end;
        int MAX_THREADS = 4096; // Caution!
        start = omp_get_wtime();
        
    quickSequential(array, 0, size - 1); 

        end = omp_get_wtime();
        printf("Tempo de execução: %lf\n", end-start);
        if (IsSort(array, size) == 1)
                        printf("Result: Sorted\n");
                    else
                        printf("Result: Not Sorted\n");
        return 0;
    }

    void swap(int *a, int i, int j)
    {
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    int partition(int *a, int left, int right, int pivot)
    {
        int pos, i;
        swap(a, pivot, right);
        pos = left;
        for (i = left; i < right; i++)
        {
            if (a[i] < a[right])
            {
                swap(a, i, pos);
                pos++;
            }
        }
        swap(a, right, pos);
        return pos;
    }

    void quickSequential(int *a, int left, int right)
    {
        if (left < right)
        {
            int pivot = (left + right) / 2;
            int pos = partition(a, left, right, pivot);

            quickSequential(a, left, pos - 1);
            quickSequential(a, pos + 1, right);
        }
    }

    int IsSort(int *array, int size)
    {
        int i;
        for (i = 1; i < size; i++)
            if (array[i - 1] > array[i])
                return 0;
        return 1;
    }
    /**
    * Quicksort paralelo
    * @author Diogo Neiss
    * @date nov 2019
    */ 
    #include <stdio.h>
    #include <omp.h>
    #include <time.h>
    #include <stdlib.h>

    //prototipos
    int main(int argc, char **argv);
    double parametrosParalelizacao(int *array, int numThreads, int nested, int stop);
    void preencherArray(int *a);
    void swap(int *a, long i, long j);
    long partition(int *a, long left, long right, long pivot);
    void quickParallel(int *a, long left, long right, int stop);
    void quickSequential(int *a, long left, long right);
    int IsSort(int *array);

    const size_t size = 10000;

    int main(int argc, char **argv)
    {
        FILE *arquivoLog = fopen("logQuicksort.txt", "a");
        FILE *resultadosComparacao = fopen("resultadosQuicksort.txt", "a");
        fprintf(arquivoLog, "Iniciando mais uma iteração do programa, visando comparar resultados.\nTamanho do array de elementos aleatorios: [%ld]\n", size);
        long i;
        int *array;

        array = malloc(size * sizeof(long));

        int stop = 1000;
        int numThreads = 1000;
        int nestedNum = 4;
        double exec;

        double melhorTempoExec = 100;
        int arrayThreadNestedStop[3];

        for (numThreads = 1000; numThreads > 0; numThreads = numThreads / 2)
        {
            for (stop = 1000; stop > 0; stop = stop / 2)
            {
                for (nestedNum = 100; nestedNum > 0; nestedNum = nestedNum / 2)
                {
                    exec = parametrosParalelizacao(array, numThreads, nestedNum, stop);
                    fprintf(arquivoLog, "\tTempo: [%lf]\t Threads: [%d]\tNested: [%d] \t Stop: [%d]\n", exec, numThreads, nestedNum, stop);
                    if (exec < melhorTempoExec)
                    {
                        melhorTempoExec = exec;
                        arrayThreadNestedStop[0] = numThreads;
                        arrayThreadNestedStop[1] = nestedNum;
                        arrayThreadNestedStop[2] = stop;
                    }
                }
            }
        }

        printf("Melhor tempo: [%lf]\nMelhores parâmetros: Threads: [%d]\tNested: [%d]\tStop: [%d]\n", melhorTempoExec, arrayThreadNestedStop[0], arrayThreadNestedStop[1], arrayThreadNestedStop[2]);
        fprintf(resultadosComparacao, "Dados para um array de tamanho %ld:\n", size);
        fprintf(resultadosComparacao, "Melhor tempo: [%lf]\nMelhores parâmetros: Threads: [%d]\tNested: [%d]\tStop: [%d]\n", melhorTempoExec, arrayThreadNestedStop[0], arrayThreadNestedStop[1], arrayThreadNestedStop[2]);
        return 0;
    }
    double parametrosParalelizacao(int *array, int numThreads, int nestedNum, int stop)
    {
        preencherArray(array);
        double start, end;

        double startInicial = omp_get_wtime();

        omp_set_nested(nestedNum);

        omp_set_num_threads(numThreads);
        start = omp_get_wtime();
    //estou utilizando tasks, ja que sections foram lentas demais
    #pragma omp parallel
    #pragma omp single
        quickParallel(array, 0, size - 1, stop);
    #pragma omp barrier
        end = omp_get_wtime();

        double exec = end - start;

        printf("Tempo: %.7lf\tthreads: %d\tnested: %d\tstop: %d\n", exec, numThreads, nestedNum, stop);
        if (IsSort(array) == 1)
            printf("Result: Sorted\n");
        else
            printf("Result: Not Sorted\n");

        end = omp_get_wtime();
        //fprintf(resposta, "Melhor tempo de execução, em %d threads: [%lf]\n", melhorThread, melhorExecucao);
        // printf("Melhor tempo de execução, em %d threads: [%lf]\n", melhorThread, melhorExecucao);
        return exec;
    }
    void preencherArray(int *a)
    {
        srand(time(NULL));
        for (int i = 0; i < size; i++)
            a[i] = rand() % size;
    }

    void swap(int *a, long i, long j)
    {
        long t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    long partition(int *a, long left, long right, long pivot)
    {
        long pos, i;
        swap(a, pivot, right);
        pos = left;

        // por algum motivo o omp nao me permite usar esse for paralelo...
        //#pragma omp parallel for
        for (i = left; i < right; i++)
        {
            if (a[i] < a[right])
            {
                swap(a, i, pos);
                pos++;
            }
        }

        swap(a, right, pos);
        return pos;
    }
    //quicksort paralelo, utilizando tasks
    void quickParallel(int *a, long left, long right, int stop)
    {
        if (left < right)
        {
            long pivot = (left + right) / 2;
            long pos = partition(a, left, right, pivot);

            if (stop > 1)
            { // chamadas paralelizadas

    //tasks tiveram desempenho superior ao section
    #pragma omp task
                quickParallel(a, left, pos - 1, stop / 2);
    #pragma omp task
                quickParallel(a, pos + 1, right, stop / 2);
            }
            else
            {
                // #pragma omp taskwait
                quickSequential(a, left, pos - 1);
                quickSequential(a, pos + 1, right);
            }
        }
    }
    //versao não paralela do quicksort
    void quickSequential(int *a, long left, long right)
    {
        if (left < right)
        {
            long pivot = (left + right) / 2;
            long pos = partition(a, left, right, pivot);

            quickSequential(a, left, pos - 1);
            quickSequential(a, pos + 1, right);
        }
    }

    int IsSort(int *array)
    {
        long i;
        for (i = 1; i < size; i++)
            if (array[i - 1] > array[i])
                return 0;
        return 1;
    }


//agora incluirei as tabelas de comparação de resultados, para diferentes execuções e tamanhos de arrays. Já coloquei anteriormente os melhores resultados,
//as tabelas abaixo possuem diferentes comparacoes de tempos de execução.

//log mergesort
    Tempo: 0.0671586860	Threads: 100	Nested: 10
    Tempo: 0.0717782510	Threads: 50	Nested: 10
    Tempo: 0.0708597560	Threads: 25	Nested: 10
    Tempo: 0.0698725680	Threads: 12	Nested: 10
    Tempo: 0.0765806030	Threads: 6	Nested: 10
    Tempo: 0.1080443410	Threads: 3	Nested: 10
    Tempo: 0.2349799260	Threads: 1	Nested: 10
    Tempo: 0.0679582280	Threads: 100	Nested: 5
    Tempo: 0.0645646590	Threads: 50	Nested: 5
    Tempo: 0.0715401440	Threads: 25	Nested: 5
    Tempo: 0.0635803960	Threads: 12	Nested: 5
    Tempo: 0.0857637780	Threads: 6	Nested: 5
    Tempo: 0.0982805140	Threads: 3	Nested: 5
    Tempo: 0.2361484520	Threads: 1	Nested: 5
    Tempo: 0.0682312440	Threads: 100	Nested: 2
    Tempo: 0.0674619120	Threads: 50	Nested: 2
    Tempo: 0.0666352300	Threads: 25	Nested: 2
    Tempo: 0.0700428910	Threads: 12	Nested: 2
    Tempo: 0.0860931180	Threads: 6	Nested: 2
    Tempo: 0.0981339180	Threads: 3	Nested: 2
    Tempo: 0.2342914330	Threads: 1	Nested: 2
    Tempo: 0.0719029630	Threads: 100	Nested: 1
    Tempo: 0.0683927930	Threads: 50	Nested: 1
    Tempo: 0.0665940530	Threads: 25	Nested: 1
    Tempo: 0.0673144210	Threads: 12	Nested: 1
    Tempo: 0.0928426300	Threads: 6	Nested: 1
    Tempo: 0.1238054350	Threads: 3	Nested: 1
    Tempo: 0.2343700820	Threads: 1	Nested: 1
    Tempo: 0.0085768450	Threads: 100	Nested: 10
    Tempo: 0.0081411370	Threads: 50	Nested: 10
    Tempo: 0.0085438750	Threads: 25	Nested: 10
    Tempo: 0.0075930740	Threads: 12	Nested: 10
    Tempo: 0.0084365090	Threads: 6	Nested: 10
    Tempo: 0.0095085390	Threads: 3	Nested: 10
    Tempo: 0.0219859360	Threads: 1	Nested: 10
    Tempo: 0.0097241670	Threads: 100	Nested: 5
    Tempo: 0.0098219480	Threads: 50	Nested: 5
    Tempo: 0.0105401170	Threads: 25	Nested: 5
    Tempo: 0.0083232350	Threads: 12	Nested: 5
    Tempo: 0.0098284560	Threads: 6	Nested: 5
    Tempo: 0.0126943940	Threads: 3	Nested: 5
    Tempo: 0.0230858840	Threads: 1	Nested: 5
    Tempo: 0.0096435210	Threads: 100	Nested: 2
    Tempo: 0.0093027990	Threads: 50	Nested: 2
    Tempo: 0.0079633400	Threads: 25	Nested: 2
    Tempo: 0.0075791060	Threads: 12	Nested: 2
    Tempo: 0.0079719620	Threads: 6	Nested: 2
    Tempo: 0.0123282000	Threads: 3	Nested: 2
    Tempo: 0.0237292740	Threads: 1	Nested: 2
    Tempo: 0.0078808900	Threads: 100	Nested: 1
    Tempo: 0.0095135300	Threads: 50	Nested: 1
    Tempo: 0.0089851450	Threads: 25	Nested: 1
    Tempo: 0.0104751780	Threads: 12	Nested: 1
    Tempo: 0.0100956930	Threads: 6	Nested: 1
    Tempo: 0.0131549340	Threads: 3	Nested: 1
    Tempo: 0.0251275950	Threads: 1	Nested: 1
    Tempo: 0.0025703350	Threads: 100	Nested: 10
    Tempo: 0.0013234920	Threads: 50	Nested: 10
    Tempo: 0.0034215190	Threads: 25	Nested: 10
    Tempo: 0.0019216340	Threads: 12	Nested: 10
    Tempo: 0.0036353720	Threads: 6	Nested: 10
    Tempo: 0.0008689090	Threads: 3	Nested: 10
    Tempo: 0.0017224900	Threads: 1	Nested: 10
    Tempo: 0.0087798180	Threads: 100	Nested: 5
    Tempo: 0.0014401350	Threads: 50	Nested: 5
    Tempo: 0.0012546690	Threads: 25	Nested: 5
    Tempo: 0.0018364840	Threads: 12	Nested: 5
    Tempo: 0.0025669630	Threads: 6	Nested: 5
    Tempo: 0.0012643840	Threads: 3	Nested: 5
    Tempo: 0.0023153560	Threads: 1	Nested: 5
    Tempo: 0.0031716080	Threads: 100	Nested: 2
    Tempo: 0.0019096390	Threads: 50	Nested: 2
    Tempo: 0.0014018310	Threads: 25	Nested: 2
    Tempo: 0.0010827000	Threads: 12	Nested: 2
    Tempo: 0.0009458740	Threads: 6	Nested: 2
    Tempo: 0.0012525240	Threads: 3	Nested: 2
    Tempo: 0.0026713620	Threads: 1	Nested: 2
    Tempo: 0.0092482160	Threads: 100	Nested: 1
    Tempo: 0.0014086250	Threads: 50	Nested: 1
    Tempo: 0.0011820870	Threads: 25	Nested: 1
    Tempo: 0.0012732910	Threads: 12	Nested: 1
    Tempo: 0.0108943990	Threads: 6	Nested: 1
    Tempo: 0.0011387770	Threads: 3	Nested: 1
    Tempo: 0.0025156870	Threads: 1	Nested: 1
    Tempo: 0.0018230480	Threads: 100	Nested: 10
    Tempo: 0.0005465170	Threads: 50	Nested: 10
    Tempo: 0.0003388080	Threads: 25	Nested: 10
    Tempo: 0.0002214550	Threads: 12	Nested: 10
    Tempo: 0.0001051000	Threads: 6	Nested: 10
    Tempo: 0.0011501220	Threads: 3	Nested: 10
    Tempo: 0.0001765450	Threads: 1	Nested: 10
    Tempo: 0.0087235730	Threads: 100	Nested: 5
    Tempo: 0.0008493600	Threads: 50	Nested: 5
    Tempo: 0.0008549400	Threads: 25	Nested: 5
    Tempo: 0.0004882610	Threads: 12	Nested: 5
    Tempo: 0.0006631590	Threads: 6	Nested: 5
    Tempo: 0.0001061760	Threads: 3	Nested: 5
    Tempo: 0.0001593420	Threads: 1	Nested: 5
    Tempo: 0.0017143180	Threads: 100	Nested: 2
    Tempo: 0.0005776700	Threads: 50	Nested: 2
    Tempo: 0.0002957600	Threads: 25	Nested: 2
    Tempo: 0.0002252710	Threads: 12	Nested: 2
    Tempo: 0.0006529450	Threads: 6	Nested: 2
    Tempo: 0.0001137860	Threads: 3	Nested: 2
    Tempo: 0.0002017900	Threads: 1	Nested: 2
    Tempo: 0.0077227370	Threads: 100	Nested: 1
    Tempo: 0.0020334370	Threads: 50	Nested: 1
    Tempo: 0.0002948180	Threads: 25	Nested: 1
    Tempo: 0.0002580680	Threads: 12	Nested: 1
    Tempo: 0.0013424560	Threads: 6	Nested: 1
    Tempo: 0.0001475920	Threads: 3	Nested: 1
    Tempo: 0.0002224260	Threads: 1	Nested: 1
    Tempo: 0.0017919600	Threads: 100	Nested: 10
    Tempo: 0.0005294960	Threads: 50	Nested: 10
    Tempo: 0.0003188910	Threads: 25	Nested: 10
    Tempo: 0.0000985200	Threads: 12	Nested: 10
    Tempo: 0.0136693890	Threads: 6	Nested: 10
    Tempo: 0.0013555910	Threads: 3	Nested: 10
    Tempo: 0.0000177780	Threads: 1	Nested: 10
    Tempo: 0.0022270960	Threads: 100	Nested: 5
    Tempo: 0.0042916660	Threads: 50	Nested: 5
    Tempo: 0.0005858340	Threads: 25	Nested: 5
    Tempo: 0.0012394860	Threads: 12	Nested: 5
    Tempo: 0.0020230020	Threads: 6	Nested: 5
    Tempo: 0.0002397670	Threads: 3	Nested: 5
    Tempo: 0.0000202240	Threads: 1	Nested: 5
    Tempo: 0.0042019430	Threads: 100	Nested: 2
    Tempo: 0.0023310290	Threads: 50	Nested: 2
    Tempo: 0.0004370490	Threads: 25	Nested: 2
    Tempo: 0.0004736860	Threads: 12	Nested: 2
    Tempo: 0.0078458690	Threads: 6	Nested: 2
    Tempo: 0.0000501070	Threads: 3	Nested: 2
    Tempo: 0.0000188140	Threads: 1	Nested: 2
    Tempo: 0.0019779100	Threads: 100	Nested: 1
    Tempo: 0.0006226550	Threads: 50	Nested: 1
    Tempo: 0.0003196770	Threads: 25	Nested: 1
    Tempo: 0.0001732200	Threads: 12	Nested: 1
    Tempo: 0.0000741260	Threads: 6	Nested: 1
    Tempo: 0.0000297720	Threads: 3	Nested: 1
    Tempo: 0.0000199570	Threads: 1	Nested: 1
    Tempo: 0.0017476500	Threads: 100	Nested: 10
    Tempo: 0.0005259930	Threads: 50	Nested: 10
    Tempo: 0.0002719960	Threads: 25	Nested: 10
    Tempo: 0.0001442000	Threads: 12	Nested: 10
    Tempo: 0.0099957560	Threads: 6	Nested: 10
    Tempo: 0.0000395450	Threads: 3	Nested: 10
    Tempo: 0.0000074930	Threads: 1	Nested: 10
    Tempo: 0.0089159570	Threads: 100	Nested: 5
    Tempo: 0.0022725680	Threads: 50	Nested: 5
    Tempo: 0.0003842520	Threads: 25	Nested: 5
    Tempo: 0.0003903330	Threads: 12	Nested: 5
    Tempo: 0.0033936050	Threads: 6	Nested: 5
    Tempo: 0.0000225760	Threads: 3	Nested: 5
    Tempo: 0.0000061700	Threads: 1	Nested: 5
    Tempo: 0.0122725130	Threads: 100	Nested: 2
    Tempo: 0.0008821660	Threads: 50	Nested: 2
    Tempo: 0.0002851790	Threads: 25	Nested: 2
    Tempo: 0.0002509720	Threads: 12	Nested: 2
    Tempo: 0.0024495360	Threads: 6	Nested: 2
    Tempo: 0.0000289780	Threads: 3	Nested: 2
    Tempo: 0.0000063040	Threads: 1	Nested: 2
    Tempo: 0.0080763730	Threads: 100	Nested: 1
    Tempo: 0.0006469490	Threads: 50	Nested: 1
    Tempo: 0.0004028920	Threads: 25	Nested: 1
    Tempo: 0.0001767340	Threads: 12	Nested: 1
    Tempo: 0.0061110810	Threads: 6	Nested: 1
    Tempo: 0.0000489300	Threads: 3	Nested: 1
    Tempo: 0.0000090340	Threads: 1	Nested: 1
    Tempo: 0.0095495730	Threads: 100	Nested: 10
    Tempo: 0.0101432510	Threads: 50	Nested: 10
    Tempo: 0.0101173690	Threads: 25	Nested: 10
    Tempo: 0.0100319340	Threads: 12	Nested: 10
    Tempo: 0.0109159160	Threads: 6	Nested: 10
    Tempo: 0.0107868620	Threads: 3	Nested: 10
    Tempo: 0.0236869280	Threads: 1	Nested: 10
    Tempo: 0.0088093920	Threads: 100	Nested: 5
    Tempo: 0.0116922110	Threads: 50	Nested: 5
    Tempo: 0.0127960830	Threads: 25	Nested: 5
    Tempo: 0.0107390960	Threads: 12	Nested: 5
    Tempo: 0.0112526820	Threads: 6	Nested: 5
    Tempo: 0.0153869380	Threads: 3	Nested: 5
    Tempo: 0.0250731420	Threads: 1	Nested: 5
    Tempo: 0.0105072980	Threads: 100	Nested: 2
    Tempo: 0.0114997030	Threads: 50	Nested: 2
    Tempo: 0.0112531180	Threads: 25	Nested: 2
    Tempo: 0.0084103040	Threads: 12	Nested: 2
    Tempo: 0.0099542190	Threads: 6	Nested: 2
    Tempo: 0.0116387330	Threads: 3	Nested: 2
    Tempo: 0.0232456610	Threads: 1	Nested: 2
    Tempo: 0.0098596320	Threads: 100	Nested: 1
    Tempo: 0.0108027740	Threads: 50	Nested: 1
    Tempo: 0.0100134570	Threads: 25	Nested: 1
    Tempo: 0.0097184030	Threads: 12	Nested: 1
    Tempo: 0.0104223370	Threads: 6	Nested: 1
    Tempo: 0.0124078960	Threads: 3	Nested: 1
    Tempo: 0.0262962920	Threads: 1	Nested: 1

//log quicksort

    Tamanho do array de elementos aleatorios: [10000]
        Tempo: [0.017257]		Threads: [1000]	Nested: [100]		Stop: [1000]
        Tempo: [0.004893]		Threads: [1000]	Nested: [50]		Stop: [1000]
        Tempo: [0.005194]		Threads: [1000]	Nested: [25]		Stop: [1000]
        Tempo: [0.007476]		Threads: [1000]	Nested: [12]		Stop: [1000]
        Tempo: [0.007384]		Threads: [1000]	Nested: [6]		Stop: [1000]
        Tempo: [0.009155]		Threads: [1000]	Nested: [3]		Stop: [1000]
        Tempo: [0.009228]		Threads: [1000]	Nested: [1]		Stop: [1000]
        Tempo: [0.006962]		Threads: [1000]	Nested: [100]		Stop: [500]
        Tempo: [0.007933]		Threads: [1000]	Nested: [50]		Stop: [500]
        Tempo: [0.009572]		Threads: [1000]	Nested: [25]		Stop: [500]
        Tempo: [0.008789]		Threads: [1000]	Nested: [12]		Stop: [500]
        Tempo: [0.007251]		Threads: [1000]	Nested: [6]		Stop: [500]
        Tempo: [0.009882]		Threads: [1000]	Nested: [3]		Stop: [500]
        Tempo: [0.010033]		Threads: [1000]	Nested: [1]		Stop: [500]
        Tempo: [0.007526]		Threads: [1000]	Nested: [100]		Stop: [250]
        Tempo: [0.009870]		Threads: [1000]	Nested: [50]		Stop: [250]
        Tempo: [0.006612]		Threads: [1000]	Nested: [25]		Stop: [250]
        Tempo: [0.009591]		Threads: [1000]	Nested: [12]		Stop: [250]
        Tempo: [0.007030]		Threads: [1000]	Nested: [6]		Stop: [250]
        Tempo: [0.005344]		Threads: [1000]	Nested: [3]		Stop: [250]
        Tempo: [0.008228]		Threads: [1000]	Nested: [1]		Stop: [250]
        Tempo: [0.008441]		Threads: [1000]	Nested: [100]		Stop: [125]
        Tempo: [0.009441]		Threads: [1000]	Nested: [50]		Stop: [125]
        Tempo: [0.008570]		Threads: [1000]	Nested: [25]		Stop: [125]
        Tempo: [0.007961]		Threads: [1000]	Nested: [12]		Stop: [125]
        Tempo: [0.010107]		Threads: [1000]	Nested: [6]		Stop: [125]
        Tempo: [0.007753]		Threads: [1000]	Nested: [3]		Stop: [125]
        Tempo: [0.007509]		Threads: [1000]	Nested: [1]		Stop: [125]
        Tempo: [0.008562]		Threads: [1000]	Nested: [100]		Stop: [62]
        Tempo: [0.007342]		Threads: [1000]	Nested: [50]		Stop: [62]
        Tempo: [0.008746]		Threads: [1000]	Nested: [25]		Stop: [62]
        Tempo: [0.010999]		Threads: [1000]	Nested: [12]		Stop: [62]
        Tempo: [0.008343]		Threads: [1000]	Nested: [6]		Stop: [62]
        Tempo: [0.006435]		Threads: [1000]	Nested: [3]		Stop: [62]
        Tempo: [0.007568]		Threads: [1000]	Nested: [1]		Stop: [62]
        Tempo: [0.007406]		Threads: [1000]	Nested: [100]		Stop: [31]
        Tempo: [0.009221]		Threads: [1000]	Nested: [50]		Stop: [31]
        Tempo: [0.006599]		Threads: [1000]	Nested: [25]		Stop: [31]
        Tempo: [0.007323]		Threads: [1000]	Nested: [12]		Stop: [31]
        Tempo: [0.006960]		Threads: [1000]	Nested: [6]		Stop: [31]
        Tempo: [0.007911]		Threads: [1000]	Nested: [3]		Stop: [31]
        Tempo: [0.006659]		Threads: [1000]	Nested: [1]		Stop: [31]
        Tempo: [0.007555]		Threads: [1000]	Nested: [100]		Stop: [15]
        Tempo: [0.005631]		Threads: [1000]	Nested: [50]		Stop: [15]
        Tempo: [0.009177]		Threads: [1000]	Nested: [25]		Stop: [15]
        Tempo: [0.008863]		Threads: [1000]	Nested: [12]		Stop: [15]
        Tempo: [0.008942]		Threads: [1000]	Nested: [6]		Stop: [15]
        Tempo: [0.007408]		Threads: [1000]	Nested: [3]		Stop: [15]
        Tempo: [0.009441]		Threads: [1000]	Nested: [1]		Stop: [15]
        Tempo: [0.006810]		Threads: [1000]	Nested: [100]		Stop: [7]
        Tempo: [0.007529]		Threads: [1000]	Nested: [50]		Stop: [7]
        Tempo: [0.010808]		Threads: [1000]	Nested: [25]		Stop: [7]
        Tempo: [0.008358]		Threads: [1000]	Nested: [12]		Stop: [7]
        Tempo: [0.008513]		Threads: [1000]	Nested: [6]		Stop: [7]
        Tempo: [0.008025]		Threads: [1000]	Nested: [3]		Stop: [7]
        Tempo: [0.007258]		Threads: [1000]	Nested: [1]		Stop: [7]
        Tempo: [0.009486]		Threads: [1000]	Nested: [100]		Stop: [3]
        Tempo: [0.007897]		Threads: [1000]	Nested: [50]		Stop: [3]
        Tempo: [0.006511]		Threads: [1000]	Nested: [25]		Stop: [3]
        Tempo: [0.007638]		Threads: [1000]	Nested: [12]		Stop: [3]
        Tempo: [0.007241]		Threads: [1000]	Nested: [6]		Stop: [3]
        Tempo: [0.007643]		Threads: [1000]	Nested: [3]		Stop: [3]
        Tempo: [0.008276]		Threads: [1000]	Nested: [1]		Stop: [3]
        Tempo: [0.008286]		Threads: [1000]	Nested: [100]		Stop: [1]
        Tempo: [0.007452]		Threads: [1000]	Nested: [50]		Stop: [1]
        Tempo: [0.008003]		Threads: [1000]	Nested: [25]		Stop: [1]
        Tempo: [0.006485]		Threads: [1000]	Nested: [12]		Stop: [1]
        Tempo: [0.007422]		Threads: [1000]	Nested: [6]		Stop: [1]
        Tempo: [0.007023]		Threads: [1000]	Nested: [3]		Stop: [1]
        Tempo: [0.007923]		Threads: [1000]	Nested: [1]		Stop: [1]
        Tempo: [0.008527]		Threads: [500]	Nested: [100]		Stop: [1000]
        Tempo: [0.004198]		Threads: [500]	Nested: [50]		Stop: [1000]
        Tempo: [0.008142]		Threads: [500]	Nested: [25]		Stop: [1000]
        Tempo: [0.006884]		Threads: [500]	Nested: [12]		Stop: [1000]
        Tempo: [0.009278]		Threads: [500]	Nested: [6]		Stop: [1000]
        Tempo: [0.004909]		Threads: [500]	Nested: [3]		Stop: [1000]
        Tempo: [0.005305]		Threads: [500]	Nested: [1]		Stop: [1000]
        Tempo: [0.005355]		Threads: [500]	Nested: [100]		Stop: [500]
        Tempo: [0.004735]		Threads: [500]	Nested: [50]		Stop: [500]
        Tempo: [0.005426]		Threads: [500]	Nested: [25]		Stop: [500]
        Tempo: [0.007214]		Threads: [500]	Nested: [12]		Stop: [500]
        Tempo: [0.003841]		Threads: [500]	Nested: [6]		Stop: [500]
        Tempo: [0.004355]		Threads: [500]	Nested: [3]		Stop: [500]
        Tempo: [0.006794]		Threads: [500]	Nested: [1]		Stop: [500]
        Tempo: [0.004215]		Threads: [500]	Nested: [100]		Stop: [250]
        Tempo: [0.003691]		Threads: [500]	Nested: [50]		Stop: [250]
        Tempo: [0.005787]		Threads: [500]	Nested: [25]		Stop: [250]
        Tempo: [0.004267]		Threads: [500]	Nested: [12]		Stop: [250]
        Tempo: [0.004331]		Threads: [500]	Nested: [6]		Stop: [250]
        Tempo: [0.006224]		Threads: [500]	Nested: [3]		Stop: [250]
        Tempo: [0.004452]		Threads: [500]	Nested: [1]		Stop: [250]
        Tempo: [0.003480]		Threads: [500]	Nested: [100]		Stop: [125]
        Tempo: [0.004374]		Threads: [500]	Nested: [50]		Stop: [125]
        Tempo: [0.004207]		Threads: [500]	Nested: [25]		Stop: [125]
        Tempo: [0.004714]		Threads: [500]	Nested: [12]		Stop: [125]
        Tempo: [0.004887]		Threads: [500]	Nested: [6]		Stop: [125]
        Tempo: [0.004694]		Threads: [500]	Nested: [3]		Stop: [125]
        Tempo: [0.003284]		Threads: [500]	Nested: [1]		Stop: [125]
        Tempo: [0.004351]		Threads: [500]	Nested: [100]		Stop: [62]
        Tempo: [0.003161]		Threads: [500]	Nested: [50]		Stop: [62]
        Tempo: [0.004999]		Threads: [500]	Nested: [25]		Stop: [62]
        Tempo: [0.004871]		Threads: [500]	Nested: [12]		Stop: [62]
        Tempo: [0.006081]		Threads: [500]	Nested: [6]		Stop: [62]
        Tempo: [0.003747]		Threads: [500]	Nested: [3]		Stop: [62]
        Tempo: [0.004190]		Threads: [500]	Nested: [1]		Stop: [62]
        Tempo: [0.003723]		Threads: [500]	Nested: [100]		Stop: [31]
        Tempo: [0.006415]		Threads: [500]	Nested: [50]		Stop: [31]
        Tempo: [0.003068]		Threads: [500]	Nested: [25]		Stop: [31]
        Tempo: [0.003827]		Threads: [500]	Nested: [12]		Stop: [31]
        Tempo: [0.005335]		Threads: [500]	Nested: [6]		Stop: [31]
        Tempo: [0.003827]		Threads: [500]	Nested: [3]		Stop: [31]
        Tempo: [0.003659]		Threads: [500]	Nested: [1]		Stop: [31]
        Tempo: [0.004555]		Threads: [500]	Nested: [100]		Stop: [15]
        Tempo: [0.004170]		Threads: [500]	Nested: [50]		Stop: [15]
        Tempo: [0.003714]		Threads: [500]	Nested: [25]		Stop: [15]
        Tempo: [0.004219]		Threads: [500]	Nested: [12]		Stop: [15]
        Tempo: [0.006304]		Threads: [500]	Nested: [6]		Stop: [15]
        Tempo: [0.003717]		Threads: [500]	Nested: [3]		Stop: [15]
        Tempo: [0.004357]		Threads: [500]	Nested: [1]		Stop: [15]
        Tempo: [0.004041]		Threads: [500]	Nested: [100]		Stop: [7]
        Tempo: [0.005159]		Threads: [500]	Nested: [50]		Stop: [7]
        Tempo: [0.003953]		Threads: [500]	Nested: [25]		Stop: [7]
        Tempo: [0.004539]		Threads: [500]	Nested: [12]		Stop: [7]
        Tempo: [0.006309]		Threads: [500]	Nested: [6]		Stop: [7]
        Tempo: [0.004751]		Threads: [500]	Nested: [3]		Stop: [7]
        Tempo: [0.004578]		Threads: [500]	Nested: [1]		Stop: [7]
        Tempo: [0.006323]		Threads: [500]	Nested: [100]		Stop: [3]
        Tempo: [0.004425]		Threads: [500]	Nested: [50]		Stop: [3]
        Tempo: [0.004653]		Threads: [500]	Nested: [25]		Stop: [3]
        Tempo: [0.006128]		Threads: [500]	Nested: [12]		Stop: [3]
        Tempo: [0.004098]		Threads: [500]	Nested: [6]		Stop: [3]
        Tempo: [0.004693]		Threads: [500]	Nested: [3]		Stop: [3]
        Tempo: [0.004968]		Threads: [500]	Nested: [1]		Stop: [3]
        Tempo: [0.004300]		Threads: [500]	Nested: [100]		Stop: [1]
        Tempo: [0.005303]		Threads: [500]	Nested: [50]		Stop: [1]
        Tempo: [0.003827]		Threads: [500]	Nested: [25]		Stop: [1]
        Tempo: [0.004617]		Threads: [500]	Nested: [12]		Stop: [1]
        Tempo: [0.003979]		Threads: [500]	Nested: [6]		Stop: [1]
        Tempo: [0.003990]		Threads: [500]	Nested: [3]		Stop: [1]
        Tempo: [0.005190]		Threads: [500]	Nested: [1]		Stop: [1]
        Tempo: [0.005050]		Threads: [250]	Nested: [100]		Stop: [1000]
        Tempo: [0.003138]		Threads: [250]	Nested: [50]		Stop: [1000]
        Tempo: [0.001956]		Threads: [250]	Nested: [25]		Stop: [1000]
        Tempo: [0.003512]		Threads: [250]	Nested: [12]		Stop: [1000]
        Tempo: [0.002324]		Threads: [250]	Nested: [6]		Stop: [1000]
        Tempo: [0.003089]		Threads: [250]	Nested: [3]		Stop: [1000]
        Tempo: [0.003682]		Threads: [250]	Nested: [1]		Stop: [1000]
        Tempo: [0.002411]		Threads: [250]	Nested: [100]		Stop: [500]
        Tempo: [0.004690]		Threads: [250]	Nested: [50]		Stop: [500]
        Tempo: [0.001897]		Threads: [250]	Nested: [25]		Stop: [500]
        Tempo: [0.002228]		Threads: [250]	Nested: [12]		Stop: [500]
        Tempo: [0.005046]		Threads: [250]	Nested: [6]		Stop: [500]
        Tempo: [0.002511]		Threads: [250]	Nested: [3]		Stop: [500]
        Tempo: [0.001727]		Threads: [250]	Nested: [1]		Stop: [500]
        Tempo: [0.001849]		Threads: [250]	Nested: [100]		Stop: [250]
        Tempo: [0.002561]		Threads: [250]	Nested: [50]		Stop: [250]
        Tempo: [0.002113]		Threads: [250]	Nested: [25]		Stop: [250]
        Tempo: [0.004039]		Threads: [250]	Nested: [12]		Stop: [250]
        Tempo: [0.005684]		Threads: [250]	Nested: [6]		Stop: [250]
        Tempo: [0.002224]		Threads: [250]	Nested: [3]		Stop: [250]
        Tempo: [0.002936]		Threads: [250]	Nested: [1]		Stop: [250]
        Tempo: [0.002229]		Threads: [250]	Nested: [100]		Stop: [125]
        Tempo: [0.002219]		Threads: [250]	Nested: [50]		Stop: [125]
        Tempo: [0.002690]		Threads: [250]	Nested: [25]		Stop: [125]
        Tempo: [0.001807]		Threads: [250]	Nested: [12]		Stop: [125]
        Tempo: [0.002446]		Threads: [250]	Nested: [6]		Stop: [125]
        Tempo: [0.002028]		Threads: [250]	Nested: [3]		Stop: [125]
        Tempo: [0.002128]		Threads: [250]	Nested: [1]		Stop: [125]
        Tempo: [0.001878]		Threads: [250]	Nested: [100]		Stop: [62]
        Tempo: [0.001903]		Threads: [250]	Nested: [50]		Stop: [62]
        Tempo: [0.002154]		Threads: [250]	Nested: [25]		Stop: [62]
        Tempo: [0.002761]		Threads: [250]	Nested: [12]		Stop: [62]
        Tempo: [0.001918]		Threads: [250]	Nested: [6]		Stop: [62]
        Tempo: [0.004472]		Threads: [250]	Nested: [3]		Stop: [62]
        Tempo: [0.002467]		Threads: [250]	Nested: [1]		Stop: [62]
        Tempo: [0.001887]		Threads: [250]	Nested: [100]		Stop: [31]
        Tempo: [0.002184]		Threads: [250]	Nested: [50]		Stop: [31]
        Tempo: [0.002297]		Threads: [250]	Nested: [25]		Stop: [31]
        Tempo: [0.002333]		Threads: [250]	Nested: [12]		Stop: [31]
        Tempo: [0.003972]		Threads: [250]	Nested: [6]		Stop: [31]
        Tempo: [0.002663]		Threads: [250]	Nested: [3]		Stop: [31]
        Tempo: [0.001741]		Threads: [250]	Nested: [1]		Stop: [31]
        Tempo: [0.003059]		Threads: [250]	Nested: [100]		Stop: [15]
        Tempo: [0.001804]		Threads: [250]	Nested: [50]		Stop: [15]
        Tempo: [0.005280]		Threads: [250]	Nested: [25]		Stop: [15]
        Tempo: [0.002474]		Threads: [250]	Nested: [12]		Stop: [15]
        Tempo: [0.001835]		Threads: [250]	Nested: [6]		Stop: [15]
        Tempo: [0.002356]		Threads: [250]	Nested: [3]		Stop: [15]
        Tempo: [0.002086]		Threads: [250]	Nested: [1]		Stop: [15]
        Tempo: [0.004204]		Threads: [250]	Nested: [100]		Stop: [7]
        Tempo: [0.002942]		Threads: [250]	Nested: [50]		Stop: [7]
        Tempo: [0.002956]		Threads: [250]	Nested: [25]		Stop: [7]
        Tempo: [0.003198]		Threads: [250]	Nested: [12]		Stop: [7]
        Tempo: [0.003079]		Threads: [250]	Nested: [6]		Stop: [7]
        Tempo: [0.004693]		Threads: [250]	Nested: [3]		Stop: [7]
        Tempo: [0.002707]		Threads: [250]	Nested: [1]		Stop: [7]
        Tempo: [0.003299]		Threads: [250]	Nested: [100]		Stop: [3]
        Tempo: [0.003115]		Threads: [250]	Nested: [50]		Stop: [3]
        Tempo: [0.003182]		Threads: [250]	Nested: [25]		Stop: [3]
        Tempo: [0.003249]		Threads: [250]	Nested: [12]		Stop: [3]
        Tempo: [0.002643]		Threads: [250]	Nested: [6]		Stop: [3]
        Tempo: [0.003064]		Threads: [250]	Nested: [3]		Stop: [3]
        Tempo: [0.003279]		Threads: [250]	Nested: [1]		Stop: [3]
        Tempo: [0.004593]		Threads: [250]	Nested: [100]		Stop: [1]
        Tempo: [0.003014]		Threads: [250]	Nested: [50]		Stop: [1]
        Tempo: [0.003535]		Threads: [250]	Nested: [25]		Stop: [1]
        Tempo: [0.003662]		Threads: [250]	Nested: [12]		Stop: [1]
        Tempo: [0.004823]		Threads: [250]	Nested: [6]		Stop: [1]
        Tempo: [0.002834]		Threads: [250]	Nested: [3]		Stop: [1]
        Tempo: [0.003550]		Threads: [250]	Nested: [1]		Stop: [1]
        Tempo: [0.002782]		Threads: [125]	Nested: [100]		Stop: [1000]
        Tempo: [0.006777]		Threads: [125]	Nested: [50]		Stop: [1000]
        Tempo: [0.001778]		Threads: [125]	Nested: [25]		Stop: [1000]
        Tempo: [0.001514]		Threads: [125]	Nested: [12]		Stop: [1000]
        Tempo: [0.001659]		Threads: [125]	Nested: [6]		Stop: [1000]
        Tempo: [0.001194]		Threads: [125]	Nested: [3]		Stop: [1000]
        Tempo: [0.004192]		Threads: [125]	Nested: [1]		Stop: [1000]
        Tempo: [0.001197]		Threads: [125]	Nested: [100]		Stop: [500]
        Tempo: [0.002545]		Threads: [125]	Nested: [50]		Stop: [500]
        Tempo: [0.002694]		Threads: [125]	Nested: [25]		Stop: [500]
        Tempo: [0.001303]		Threads: [125]	Nested: [12]		Stop: [500]
        Tempo: [0.001319]		Threads: [125]	Nested: [6]		Stop: [500]
        Tempo: [0.001146]		Threads: [125]	Nested: [3]		Stop: [500]
        Tempo: [0.005280]		Threads: [125]	Nested: [1]		Stop: [500]
        Tempo: [0.002289]		Threads: [125]	Nested: [100]		Stop: [250]
        Tempo: [0.001315]		Threads: [125]	Nested: [50]		Stop: [250]
        Tempo: [0.001305]		Threads: [125]	Nested: [25]		Stop: [250]
        Tempo: [0.001071]		Threads: [125]	Nested: [12]		Stop: [250]
        Tempo: [0.001601]		Threads: [125]	Nested: [6]		Stop: [250]
        Tempo: [0.001159]		Threads: [125]	Nested: [3]		Stop: [250]
        Tempo: [0.001803]		Threads: [125]	Nested: [1]		Stop: [250]
        Tempo: [0.001341]		Threads: [125]	Nested: [100]		Stop: [125]
        Tempo: [0.001562]		Threads: [125]	Nested: [50]		Stop: [125]
        Tempo: [0.002085]		Threads: [125]	Nested: [25]		Stop: [125]
        Tempo: [0.001050]		Threads: [125]	Nested: [12]		Stop: [125]
        Tempo: [0.001012]		Threads: [125]	Nested: [6]		Stop: [125]
        Tempo: [0.001091]		Threads: [125]	Nested: [3]		Stop: [125]
        Tempo: [0.001719]		Threads: [125]	Nested: [1]		Stop: [125]
        Tempo: [0.001026]		Threads: [125]	Nested: [100]		Stop: [62]
        Tempo: [0.003928]		Threads: [125]	Nested: [50]		Stop: [62]
        Tempo: [0.001740]		Threads: [125]	Nested: [25]		Stop: [62]
        Tempo: [0.001494]		Threads: [125]	Nested: [12]		Stop: [62]
        Tempo: [0.001071]		Threads: [125]	Nested: [6]		Stop: [62]
        Tempo: [0.001162]		Threads: [125]	Nested: [3]		Stop: [62]
        Tempo: [0.001657]		Threads: [125]	Nested: [1]		Stop: [62]
        Tempo: [0.001512]		Threads: [125]	Nested: [100]		Stop: [31]
        Tempo: [0.004566]		Threads: [125]	Nested: [50]		Stop: [31]
        Tempo: [0.001425]		Threads: [125]	Nested: [25]		Stop: [31]
        Tempo: [0.002002]		Threads: [125]	Nested: [12]		Stop: [31]
        Tempo: [0.001376]		Threads: [125]	Nested: [6]		Stop: [31]
        Tempo: [0.001203]		Threads: [125]	Nested: [3]		Stop: [31]
        Tempo: [0.001465]		Threads: [125]	Nested: [1]		Stop: [31]
        Tempo: [0.001508]		Threads: [125]	Nested: [100]		Stop: [15]
        Tempo: [0.001569]		Threads: [125]	Nested: [50]		Stop: [15]
        Tempo: [0.004260]		Threads: [125]	Nested: [25]		Stop: [15]
        Tempo: [0.002328]		Threads: [125]	Nested: [12]		Stop: [15]
        Tempo: [0.001553]		Threads: [125]	Nested: [6]		Stop: [15]
        Tempo: [0.001591]		Threads: [125]	Nested: [3]		Stop: [15]
        Tempo: [0.001701]		Threads: [125]	Nested: [1]		Stop: [15]
        Tempo: [0.002213]		Threads: [125]	Nested: [100]		Stop: [7]
        Tempo: [0.003634]		Threads: [125]	Nested: [50]		Stop: [7]
        Tempo: [0.002681]		Threads: [125]	Nested: [25]		Stop: [7]
        Tempo: [0.002195]		Threads: [125]	Nested: [12]		Stop: [7]
        Tempo: [0.002237]		Threads: [125]	Nested: [6]		Stop: [7]
        Tempo: [0.002304]		Threads: [125]	Nested: [3]		Stop: [7]
        Tempo: [0.002561]		Threads: [125]	Nested: [1]		Stop: [7]
        Tempo: [0.004342]		Threads: [125]	Nested: [100]		Stop: [3]
        Tempo: [0.002537]		Threads: [125]	Nested: [50]		Stop: [3]
        Tempo: [0.002256]		Threads: [125]	Nested: [25]		Stop: [3]
        Tempo: [0.002525]		Threads: [125]	Nested: [12]		Stop: [3]
        Tempo: [0.002289]		Threads: [125]	Nested: [6]		Stop: [3]
        Tempo: [0.002763]		Threads: [125]	Nested: [3]		Stop: [3]
        Tempo: [0.002071]		Threads: [125]	Nested: [1]		Stop: [3]
        Tempo: [0.003050]		Threads: [125]	Nested: [100]		Stop: [1]
        Tempo: [0.002851]		Threads: [125]	Nested: [50]		Stop: [1]
        Tempo: [0.002440]		Threads: [125]	Nested: [25]		Stop: [1]
        Tempo: [0.002831]		Threads: [125]	Nested: [12]		Stop: [1]
        Tempo: [0.003630]		Threads: [125]	Nested: [6]		Stop: [1]
        Tempo: [0.002557]		Threads: [125]	Nested: [3]		Stop: [1]
        Tempo: [0.002781]		Threads: [125]	Nested: [1]		Stop: [1]
        Tempo: [0.001797]		Threads: [62]	Nested: [100]		Stop: [1000]
        Tempo: [0.001323]		Threads: [62]	Nested: [50]		Stop: [1000]
        Tempo: [0.004358]		Threads: [62]	Nested: [25]		Stop: [1000]
        Tempo: [0.001619]		Threads: [62]	Nested: [12]		Stop: [1000]
        Tempo: [0.001115]		Threads: [62]	Nested: [6]		Stop: [1000]
        Tempo: [0.000918]		Threads: [62]	Nested: [3]		Stop: [1000]
        Tempo: [0.001083]		Threads: [62]	Nested: [1]		Stop: [1000]
        Tempo: [0.001535]		Threads: [62]	Nested: [100]		Stop: [500]
        Tempo: [0.000992]		Threads: [62]	Nested: [50]		Stop: [500]
        Tempo: [0.001016]		Threads: [62]	Nested: [25]		Stop: [500]
        Tempo: [0.004496]		Threads: [62]	Nested: [12]		Stop: [500]
        Tempo: [0.002297]		Threads: [62]	Nested: [6]		Stop: [500]
        Tempo: [0.001543]		Threads: [62]	Nested: [3]		Stop: [500]
        Tempo: [0.000907]		Threads: [62]	Nested: [1]		Stop: [500]
        Tempo: [0.001240]		Threads: [62]	Nested: [100]		Stop: [250]
        Tempo: [0.001080]		Threads: [62]	Nested: [50]		Stop: [250]
        Tempo: [0.001471]		Threads: [62]	Nested: [25]		Stop: [250]
        Tempo: [0.001068]		Threads: [62]	Nested: [12]		Stop: [250]
        Tempo: [0.003142]		Threads: [62]	Nested: [6]		Stop: [250]
        Tempo: [0.001415]		Threads: [62]	Nested: [3]		Stop: [250]
        Tempo: [0.001656]		Threads: [62]	Nested: [1]		Stop: [250]
        Tempo: [0.000908]		Threads: [62]	Nested: [100]		Stop: [125]
        Tempo: [0.000978]		Threads: [62]	Nested: [50]		Stop: [125]
        Tempo: [0.003618]		Threads: [62]	Nested: [25]		Stop: [125]
        Tempo: [0.001128]		Threads: [62]	Nested: [12]		Stop: [125]
        Tempo: [0.000918]		Threads: [62]	Nested: [6]		Stop: [125]
        Tempo: [0.002099]		Threads: [62]	Nested: [3]		Stop: [125]
        Tempo: [0.001034]		Threads: [62]	Nested: [1]		Stop: [125]
        Tempo: [0.001068]		Threads: [62]	Nested: [100]		Stop: [62]
        Tempo: [0.001720]		Threads: [62]	Nested: [50]		Stop: [62]
        Tempo: [0.000926]		Threads: [62]	Nested: [25]		Stop: [62]
        Tempo: [0.000861]		Threads: [62]	Nested: [12]		Stop: [62]
        Tempo: [0.000861]		Threads: [62]	Nested: [6]		Stop: [62]
        Tempo: [0.000963]		Threads: [62]	Nested: [3]		Stop: [62]
        Tempo: [0.001256]		Threads: [62]	Nested: [1]		Stop: [62]
        Tempo: [0.001108]		Threads: [62]	Nested: [100]		Stop: [31]
        Tempo: [0.001174]		Threads: [62]	Nested: [50]		Stop: [31]
        Tempo: [0.001420]		Threads: [62]	Nested: [25]		Stop: [31]
        Tempo: [0.001191]		Threads: [62]	Nested: [12]		Stop: [31]
        Tempo: [0.001246]		Threads: [62]	Nested: [6]		Stop: [31]
        Tempo: [0.001619]		Threads: [62]	Nested: [3]		Stop: [31]
        Tempo: [0.001315]		Threads: [62]	Nested: [1]		Stop: [31]
        Tempo: [0.001323]		Threads: [62]	Nested: [100]		Stop: [15]
        Tempo: [0.001459]		Threads: [62]	Nested: [50]		Stop: [15]
        Tempo: [0.001399]		Threads: [62]	Nested: [25]		Stop: [15]
        Tempo: [0.001496]		Threads: [62]	Nested: [12]		Stop: [15]
        Tempo: [0.001634]		Threads: [62]	Nested: [6]		Stop: [15]
        Tempo: [0.001443]		Threads: [62]	Nested: [3]		Stop: [15]
        Tempo: [0.001560]		Threads: [62]	Nested: [1]		Stop: [15]
        Tempo: [0.002031]		Threads: [62]	Nested: [100]		Stop: [7]
        Tempo: [0.002057]		Threads: [62]	Nested: [50]		Stop: [7]
        Tempo: [0.002318]		Threads: [62]	Nested: [25]		Stop: [7]
        Tempo: [0.001963]		Threads: [62]	Nested: [12]		Stop: [7]
        Tempo: [0.002136]		Threads: [62]	Nested: [6]		Stop: [7]
        Tempo: [0.004533]		Threads: [62]	Nested: [3]		Stop: [7]
        Tempo: [0.002111]		Threads: [62]	Nested: [1]		Stop: [7]
        Tempo: [0.002148]		Threads: [62]	Nested: [100]		Stop: [3]
        Tempo: [0.002476]		Threads: [62]	Nested: [50]		Stop: [3]
        Tempo: [0.002501]		Threads: [62]	Nested: [25]		Stop: [3]
        Tempo: [0.002325]		Threads: [62]	Nested: [12]		Stop: [3]
        Tempo: [0.002292]		Threads: [62]	Nested: [6]		Stop: [3]
        Tempo: [0.002373]		Threads: [62]	Nested: [3]		Stop: [3]
        Tempo: [0.002638]		Threads: [62]	Nested: [1]		Stop: [3]
        Tempo: [0.002222]		Threads: [62]	Nested: [100]		Stop: [1]
        Tempo: [0.002616]		Threads: [62]	Nested: [50]		Stop: [1]
        Tempo: [0.002437]		Threads: [62]	Nested: [25]		Stop: [1]
        Tempo: [0.003895]		Threads: [62]	Nested: [12]		Stop: [1]
        Tempo: [0.002270]		Threads: [62]	Nested: [6]		Stop: [1]
        Tempo: [0.003181]		Threads: [62]	Nested: [3]		Stop: [1]
        Tempo: [0.003387]		Threads: [62]	Nested: [1]		Stop: [1]
        Tempo: [0.001322]		Threads: [31]	Nested: [100]		Stop: [1000]
        Tempo: [0.001093]		Threads: [31]	Nested: [50]		Stop: [1000]
        Tempo: [0.001086]		Threads: [31]	Nested: [25]		Stop: [1000]
        Tempo: [0.001187]		Threads: [31]	Nested: [12]		Stop: [1000]
        Tempo: [0.001222]		Threads: [31]	Nested: [6]		Stop: [1000]
        Tempo: [0.001345]		Threads: [31]	Nested: [3]		Stop: [1000]
        Tempo: [0.001409]		Threads: [31]	Nested: [1]		Stop: [1000]
        Tempo: [0.001034]		Threads: [31]	Nested: [100]		Stop: [500]
        Tempo: [0.001436]		Threads: [31]	Nested: [50]		Stop: [500]
        Tempo: [0.004072]		Threads: [31]	Nested: [25]		Stop: [500]
        Tempo: [0.004672]		Threads: [31]	Nested: [12]		Stop: [500]
        Tempo: [0.001302]		Threads: [31]	Nested: [6]		Stop: [500]
        Tempo: [0.000978]		Threads: [31]	Nested: [3]		Stop: [500]
        Tempo: [0.001062]		Threads: [31]	Nested: [1]		Stop: [500]
        Tempo: [0.001009]		Threads: [31]	Nested: [100]		Stop: [250]
        Tempo: [0.000868]		Threads: [31]	Nested: [50]		Stop: [250]
        Tempo: [0.003465]		Threads: [31]	Nested: [25]		Stop: [250]
        Tempo: [0.000942]		Threads: [31]	Nested: [12]		Stop: [250]
        Tempo: [0.001667]		Threads: [31]	Nested: [6]		Stop: [250]
        Tempo: [0.000991]		Threads: [31]	Nested: [3]		Stop: [250]
        Tempo: [0.000819]		Threads: [31]	Nested: [1]		Stop: [250]
        Tempo: [0.000851]		Threads: [31]	Nested: [100]		Stop: [125]
        Tempo: [0.000825]		Threads: [31]	Nested: [50]		Stop: [125]
        Tempo: [0.001077]		Threads: [31]	Nested: [25]		Stop: [125]
        Tempo: [0.001344]		Threads: [31]	Nested: [12]		Stop: [125]
        Tempo: [0.000995]		Threads: [31]	Nested: [6]		Stop: [125]
        Tempo: [0.000937]		Threads: [31]	Nested: [3]		Stop: [125]
        Tempo: [0.000921]		Threads: [31]	Nested: [1]		Stop: [125]
        Tempo: [0.001015]		Threads: [31]	Nested: [100]		Stop: [62]
        Tempo: [0.001294]		Threads: [31]	Nested: [50]		Stop: [62]
        Tempo: [0.001334]		Threads: [31]	Nested: [25]		Stop: [62]
        Tempo: [0.001000]		Threads: [31]	Nested: [12]		Stop: [62]
        Tempo: [0.001091]		Threads: [31]	Nested: [6]		Stop: [62]
        Tempo: [0.000859]		Threads: [31]	Nested: [3]		Stop: [62]
        Tempo: [0.001068]		Threads: [31]	Nested: [1]		Stop: [62]
        Tempo: [0.001081]		Threads: [31]	Nested: [100]		Stop: [31]
        Tempo: [0.001085]		Threads: [31]	Nested: [50]		Stop: [31]
        Tempo: [0.001525]		Threads: [31]	Nested: [25]		Stop: [31]
        Tempo: [0.002865]		Threads: [31]	Nested: [12]		Stop: [31]
        Tempo: [0.001365]		Threads: [31]	Nested: [6]		Stop: [31]
        Tempo: [0.001177]		Threads: [31]	Nested: [3]		Stop: [31]
        Tempo: [0.001137]		Threads: [31]	Nested: [1]		Stop: [31]
        Tempo: [0.001554]		Threads: [31]	Nested: [100]		Stop: [15]
        Tempo: [0.001357]		Threads: [31]	Nested: [50]		Stop: [15]
        Tempo: [0.001321]		Threads: [31]	Nested: [25]		Stop: [15]
        Tempo: [0.001237]		Threads: [31]	Nested: [12]		Stop: [15]
        Tempo: [0.002755]		Threads: [31]	Nested: [6]		Stop: [15]
        Tempo: [0.001502]		Threads: [31]	Nested: [3]		Stop: [15]
        Tempo: [0.001311]		Threads: [31]	Nested: [1]		Stop: [15]
        Tempo: [0.001970]		Threads: [31]	Nested: [100]		Stop: [7]
        Tempo: [0.002018]		Threads: [31]	Nested: [50]		Stop: [7]
        Tempo: [0.002053]		Threads: [31]	Nested: [25]		Stop: [7]
        Tempo: [0.001927]		Threads: [31]	Nested: [12]		Stop: [7]
        Tempo: [0.001893]		Threads: [31]	Nested: [6]		Stop: [7]
        Tempo: [0.002150]		Threads: [31]	Nested: [3]		Stop: [7]
        Tempo: [0.002121]		Threads: [31]	Nested: [1]		Stop: [7]
        Tempo: [0.001981]		Threads: [31]	Nested: [100]		Stop: [3]
        Tempo: [0.001962]		Threads: [31]	Nested: [50]		Stop: [3]
        Tempo: [0.002122]		Threads: [31]	Nested: [25]		Stop: [3]
        Tempo: [0.001855]		Threads: [31]	Nested: [12]		Stop: [3]
        Tempo: [0.002015]		Threads: [31]	Nested: [6]		Stop: [3]
        Tempo: [0.001882]		Threads: [31]	Nested: [3]		Stop: [3]
        Tempo: [0.002023]		Threads: [31]	Nested: [1]		Stop: [3]
        Tempo: [0.002162]		Threads: [31]	Nested: [100]		Stop: [1]
        Tempo: [0.002172]		Threads: [31]	Nested: [50]		Stop: [1]
        Tempo: [0.002130]		Threads: [31]	Nested: [25]		Stop: [1]
        Tempo: [0.002019]		Threads: [31]	Nested: [12]		Stop: [1]
        Tempo: [0.002214]		Threads: [31]	Nested: [6]		Stop: [1]
        Tempo: [0.002046]		Threads: [31]	Nested: [3]		Stop: [1]
        Tempo: [0.002277]		Threads: [31]	Nested: [1]		Stop: [1]
        Tempo: [0.001036]		Threads: [15]	Nested: [100]		Stop: [1000]
        Tempo: [0.000847]		Threads: [15]	Nested: [50]		Stop: [1000]
        Tempo: [0.000872]		Threads: [15]	Nested: [25]		Stop: [1000]
        Tempo: [0.001086]		Threads: [15]	Nested: [12]		Stop: [1000]
        Tempo: [0.000895]		Threads: [15]	Nested: [6]		Stop: [1000]
        Tempo: [0.000821]		Threads: [15]	Nested: [3]		Stop: [1000]
        Tempo: [0.000938]		Threads: [15]	Nested: [1]		Stop: [1000]
        Tempo: [0.001212]		Threads: [15]	Nested: [100]		Stop: [500]
        Tempo: [0.000820]		Threads: [15]	Nested: [50]		Stop: [500]
        Tempo: [0.001224]		Threads: [15]	Nested: [25]		Stop: [500]
        Tempo: [0.001703]		Threads: [15]	Nested: [12]		Stop: [500]
        Tempo: [0.000861]		Threads: [15]	Nested: [6]		Stop: [500]
        Tempo: [0.000789]		Threads: [15]	Nested: [3]		Stop: [500]
        Tempo: [0.001135]		Threads: [15]	Nested: [1]		Stop: [500]
        Tempo: [0.000994]		Threads: [15]	Nested: [100]		Stop: [250]
        Tempo: [0.001288]		Threads: [15]	Nested: [50]		Stop: [250]
        Tempo: [0.002277]		Threads: [15]	Nested: [25]		Stop: [250]
        Tempo: [0.000919]		Threads: [15]	Nested: [12]		Stop: [250]
        Tempo: [0.000826]		Threads: [15]	Nested: [6]		Stop: [250]
        Tempo: [0.000978]		Threads: [15]	Nested: [3]		Stop: [250]
        Tempo: [0.000927]		Threads: [15]	Nested: [1]		Stop: [250]
        Tempo: [0.000902]		Threads: [15]	Nested: [100]		Stop: [125]
        Tempo: [0.001823]		Threads: [15]	Nested: [50]		Stop: [125]
        Tempo: [0.000776]		Threads: [15]	Nested: [25]		Stop: [125]
        Tempo: [0.000777]		Threads: [15]	Nested: [12]		Stop: [125]
        Tempo: [0.000831]		Threads: [15]	Nested: [6]		Stop: [125]
        Tempo: [0.000847]		Threads: [15]	Nested: [3]		Stop: [125]
        Tempo: [0.000848]		Threads: [15]	Nested: [1]		Stop: [125]
        Tempo: [0.000838]		Threads: [15]	Nested: [100]		Stop: [62]
        Tempo: [0.000918]		Threads: [15]	Nested: [50]		Stop: [62]
        Tempo: [0.002368]		Threads: [15]	Nested: [25]		Stop: [62]
        Tempo: [0.001370]		Threads: [15]	Nested: [12]		Stop: [62]
        Tempo: [0.000854]		Threads: [15]	Nested: [6]		Stop: [62]
        Tempo: [0.000999]		Threads: [15]	Nested: [3]		Stop: [62]
        Tempo: [0.000787]		Threads: [15]	Nested: [1]		Stop: [62]
        Tempo: [0.001031]		Threads: [15]	Nested: [100]		Stop: [31]
        Tempo: [0.001063]		Threads: [15]	Nested: [50]		Stop: [31]
        Tempo: [0.001046]		Threads: [15]	Nested: [25]		Stop: [31]
        Tempo: [0.001098]		Threads: [15]	Nested: [12]		Stop: [31]
        Tempo: [0.001293]		Threads: [15]	Nested: [6]		Stop: [31]
        Tempo: [0.001064]		Threads: [15]	Nested: [3]		Stop: [31]
        Tempo: [0.001328]		Threads: [15]	Nested: [1]		Stop: [31]
        Tempo: [0.001497]		Threads: [15]	Nested: [100]		Stop: [15]
        Tempo: [0.001298]		Threads: [15]	Nested: [50]		Stop: [15]
        Tempo: [0.001534]		Threads: [15]	Nested: [25]		Stop: [15]
        Tempo: [0.001256]		Threads: [15]	Nested: [12]		Stop: [15]
        Tempo: [0.001560]		Threads: [15]	Nested: [6]		Stop: [15]
        Tempo: [0.001514]		Threads: [15]	Nested: [3]		Stop: [15]
        Tempo: [0.001470]		Threads: [15]	Nested: [1]		Stop: [15]
        Tempo: [0.001934]		Threads: [15]	Nested: [100]		Stop: [7]
        Tempo: [0.002026]		Threads: [15]	Nested: [50]		Stop: [7]
        Tempo: [0.001978]		Threads: [15]	Nested: [25]		Stop: [7]
        Tempo: [0.002099]		Threads: [15]	Nested: [12]		Stop: [7]
        Tempo: [0.001971]		Threads: [15]	Nested: [6]		Stop: [7]
        Tempo: [0.001913]		Threads: [15]	Nested: [3]		Stop: [7]
        Tempo: [0.001934]		Threads: [15]	Nested: [1]		Stop: [7]
        Tempo: [0.001862]		Threads: [15]	Nested: [100]		Stop: [3]
        Tempo: [0.002430]		Threads: [15]	Nested: [50]		Stop: [3]
        Tempo: [0.002029]		Threads: [15]	Nested: [25]		Stop: [3]
        Tempo: [0.002045]		Threads: [15]	Nested: [12]		Stop: [3]
        Tempo: [0.001829]		Threads: [15]	Nested: [6]		Stop: [3]
        Tempo: [0.002053]		Threads: [15]	Nested: [3]		Stop: [3]
        Tempo: [0.001933]		Threads: [15]	Nested: [1]		Stop: [3]
        Tempo: [0.002073]		Threads: [15]	Nested: [100]		Stop: [1]
        Tempo: [0.002068]		Threads: [15]	Nested: [50]		Stop: [1]
        Tempo: [0.002038]		Threads: [15]	Nested: [25]		Stop: [1]
        Tempo: [0.002129]		Threads: [15]	Nested: [12]		Stop: [1]
        Tempo: [0.001980]		Threads: [15]	Nested: [6]		Stop: [1]
        Tempo: [0.002096]		Threads: [15]	Nested: [3]		Stop: [1]
        Tempo: [0.001961]		Threads: [15]	Nested: [1]		Stop: [1]
        Tempo: [0.003780]		Threads: [7]	Nested: [100]		Stop: [1000]
        Tempo: [0.001658]		Threads: [7]	Nested: [50]		Stop: [1000]
        Tempo: [0.000715]		Threads: [7]	Nested: [25]		Stop: [1000]
        Tempo: [0.000816]		Threads: [7]	Nested: [12]		Stop: [1000]
        Tempo: [0.000802]		Threads: [7]	Nested: [6]		Stop: [1000]
        Tempo: [0.001129]		Threads: [7]	Nested: [3]		Stop: [1000]
        Tempo: [0.000785]		Threads: [7]	Nested: [1]		Stop: [1000]
        Tempo: [0.000730]		Threads: [7]	Nested: [100]		Stop: [500]
        Tempo: [0.000780]		Threads: [7]	Nested: [50]		Stop: [500]
        Tempo: [0.000779]		Threads: [7]	Nested: [25]		Stop: [500]
        Tempo: [0.000767]		Threads: [7]	Nested: [12]		Stop: [500]
        Tempo: [0.000776]		Threads: [7]	Nested: [6]		Stop: [500]
        Tempo: [0.000805]		Threads: [7]	Nested: [3]		Stop: [500]
        Tempo: [0.000787]		Threads: [7]	Nested: [1]		Stop: [500]
        Tempo: [0.001208]		Threads: [7]	Nested: [100]		Stop: [250]
        Tempo: [0.000914]		Threads: [7]	Nested: [50]		Stop: [250]
        Tempo: [0.000792]		Threads: [7]	Nested: [25]		Stop: [250]
        Tempo: [0.001284]		Threads: [7]	Nested: [12]		Stop: [250]
        Tempo: [0.000812]		Threads: [7]	Nested: [6]		Stop: [250]
        Tempo: [0.000864]		Threads: [7]	Nested: [3]		Stop: [250]
        Tempo: [0.000985]		Threads: [7]	Nested: [1]		Stop: [250]
        Tempo: [0.000757]		Threads: [7]	Nested: [100]		Stop: [125]
        Tempo: [0.000831]		Threads: [7]	Nested: [50]		Stop: [125]
        Tempo: [0.000859]		Threads: [7]	Nested: [25]		Stop: [125]
        Tempo: [0.000881]		Threads: [7]	Nested: [12]		Stop: [125]
        Tempo: [0.000760]		Threads: [7]	Nested: [6]		Stop: [125]
        Tempo: [0.001391]		Threads: [7]	Nested: [3]		Stop: [125]
        Tempo: [0.000886]		Threads: [7]	Nested: [1]		Stop: [125]
        Tempo: [0.000834]		Threads: [7]	Nested: [100]		Stop: [62]
        Tempo: [0.000790]		Threads: [7]	Nested: [50]		Stop: [62]
        Tempo: [0.000837]		Threads: [7]	Nested: [25]		Stop: [62]
        Tempo: [0.000802]		Threads: [7]	Nested: [12]		Stop: [62]
        Tempo: [0.000841]		Threads: [7]	Nested: [6]		Stop: [62]
        Tempo: [0.000740]		Threads: [7]	Nested: [3]		Stop: [62]
        Tempo: [0.000699]		Threads: [7]	Nested: [1]		Stop: [62]
        Tempo: [0.000858]		Threads: [7]	Nested: [100]		Stop: [31]
        Tempo: [0.001030]		Threads: [7]	Nested: [50]		Stop: [31]
        Tempo: [0.000946]		Threads: [7]	Nested: [25]		Stop: [31]
        Tempo: [0.000892]		Threads: [7]	Nested: [12]		Stop: [31]
        Tempo: [0.000861]		Threads: [7]	Nested: [6]		Stop: [31]
        Tempo: [0.000871]		Threads: [7]	Nested: [3]		Stop: [31]
        Tempo: [0.000919]		Threads: [7]	Nested: [1]		Stop: [31]
        Tempo: [0.001036]		Threads: [7]	Nested: [100]		Stop: [15]
        Tempo: [0.000846]		Threads: [7]	Nested: [50]		Stop: [15]
        Tempo: [0.000928]		Threads: [7]	Nested: [25]		Stop: [15]
        Tempo: [0.000951]		Threads: [7]	Nested: [12]		Stop: [15]
        Tempo: [0.001005]		Threads: [7]	Nested: [6]		Stop: [15]
        Tempo: [0.000969]		Threads: [7]	Nested: [3]		Stop: [15]
        Tempo: [0.000962]		Threads: [7]	Nested: [1]		Stop: [15]
        Tempo: [0.001264]		Threads: [7]	Nested: [100]		Stop: [7]
        Tempo: [0.001110]		Threads: [7]	Nested: [50]		Stop: [7]
        Tempo: [0.001075]		Threads: [7]	Nested: [25]		Stop: [7]
        Tempo: [0.001145]		Threads: [7]	Nested: [12]		Stop: [7]
        Tempo: [0.001180]		Threads: [7]	Nested: [6]		Stop: [7]
        Tempo: [0.001090]		Threads: [7]	Nested: [3]		Stop: [7]
        Tempo: [0.001051]		Threads: [7]	Nested: [1]		Stop: [7]
        Tempo: [0.001188]		Threads: [7]	Nested: [100]		Stop: [3]
        Tempo: [0.001277]		Threads: [7]	Nested: [50]		Stop: [3]
        Tempo: [0.001184]		Threads: [7]	Nested: [25]		Stop: [3]
        Tempo: [0.001454]		Threads: [7]	Nested: [12]		Stop: [3]
        Tempo: [0.001132]		Threads: [7]	Nested: [6]		Stop: [3]
        Tempo: [0.001060]		Threads: [7]	Nested: [3]		Stop: [3]
        Tempo: [0.001076]		Threads: [7]	Nested: [1]		Stop: [3]
        Tempo: [0.001527]		Threads: [7]	Nested: [100]		Stop: [1]
        Tempo: [0.001495]		Threads: [7]	Nested: [50]		Stop: [1]
        Tempo: [0.001414]		Threads: [7]	Nested: [25]		Stop: [1]
        Tempo: [0.001552]		Threads: [7]	Nested: [12]		Stop: [1]
        Tempo: [0.001506]		Threads: [7]	Nested: [6]		Stop: [1]
        Tempo: [0.001449]		Threads: [7]	Nested: [3]		Stop: [1]
        Tempo: [0.001491]		Threads: [7]	Nested: [1]		Stop: [1]
        Tempo: [0.001265]		Threads: [3]	Nested: [100]		Stop: [1000]
        Tempo: [0.000638]		Threads: [3]	Nested: [50]		Stop: [1000]
        Tempo: [0.000660]		Threads: [3]	Nested: [25]		Stop: [1000]
        Tempo: [0.000638]		Threads: [3]	Nested: [12]		Stop: [1000]
        Tempo: [0.000663]		Threads: [3]	Nested: [6]		Stop: [1000]
        Tempo: [0.000736]		Threads: [3]	Nested: [3]		Stop: [1000]
        Tempo: [0.000748]		Threads: [3]	Nested: [1]		Stop: [1000]
        Tempo: [0.000568]		Threads: [3]	Nested: [100]		Stop: [500]
        Tempo: [0.000581]		Threads: [3]	Nested: [50]		Stop: [500]
        Tempo: [0.000584]		Threads: [3]	Nested: [25]		Stop: [500]
        Tempo: [0.000627]		Threads: [3]	Nested: [12]		Stop: [500]
        Tempo: [0.000603]		Threads: [3]	Nested: [6]		Stop: [500]
        Tempo: [0.000611]		Threads: [3]	Nested: [3]		Stop: [500]
        Tempo: [0.000643]		Threads: [3]	Nested: [1]		Stop: [500]
        Tempo: [0.000609]		Threads: [3]	Nested: [100]		Stop: [250]
        Tempo: [0.000586]		Threads: [3]	Nested: [50]		Stop: [250]
        Tempo: [0.000563]		Threads: [3]	Nested: [25]		Stop: [250]
        Tempo: [0.000611]		Threads: [3]	Nested: [12]		Stop: [250]
        Tempo: [0.000568]		Threads: [3]	Nested: [6]		Stop: [250]
        Tempo: [0.000563]		Threads: [3]	Nested: [3]		Stop: [250]
        Tempo: [0.000557]		Threads: [3]	Nested: [1]		Stop: [250]
        Tempo: [0.000529]		Threads: [3]	Nested: [100]		Stop: [125]
        Tempo: [0.000564]		Threads: [3]	Nested: [50]		Stop: [125]
        Tempo: [0.000551]		Threads: [3]	Nested: [25]		Stop: [125]
        Tempo: [0.000572]		Threads: [3]	Nested: [12]		Stop: [125]
        Tempo: [0.000555]		Threads: [3]	Nested: [6]		Stop: [125]
        Tempo: [0.000576]		Threads: [3]	Nested: [3]		Stop: [125]
        Tempo: [0.000549]		Threads: [3]	Nested: [1]		Stop: [125]
        Tempo: [0.000541]		Threads: [3]	Nested: [100]		Stop: [62]
        Tempo: [0.000591]		Threads: [3]	Nested: [50]		Stop: [62]
        Tempo: [0.000589]		Threads: [3]	Nested: [25]		Stop: [62]
        Tempo: [0.000576]		Threads: [3]	Nested: [12]		Stop: [62]
        Tempo: [0.000592]		Threads: [3]	Nested: [6]		Stop: [62]
        Tempo: [0.000594]		Threads: [3]	Nested: [3]		Stop: [62]
        Tempo: [0.000590]		Threads: [3]	Nested: [1]		Stop: [62]
        Tempo: [0.000730]		Threads: [3]	Nested: [100]		Stop: [31]
        Tempo: [0.000730]		Threads: [3]	Nested: [50]		Stop: [31]
        Tempo: [0.000668]		Threads: [3]	Nested: [25]		Stop: [31]
        Tempo: [0.000645]		Threads: [3]	Nested: [12]		Stop: [31]
        Tempo: [0.000632]		Threads: [3]	Nested: [6]		Stop: [31]
        Tempo: [0.000642]		Threads: [3]	Nested: [3]		Stop: [31]
        Tempo: [0.000639]		Threads: [3]	Nested: [1]		Stop: [31]
        Tempo: [0.000694]		Threads: [3]	Nested: [100]		Stop: [15]
        Tempo: [0.000715]		Threads: [3]	Nested: [50]		Stop: [15]
        Tempo: [0.000718]		Threads: [3]	Nested: [25]		Stop: [15]
        Tempo: [0.000783]		Threads: [3]	Nested: [12]		Stop: [15]
        Tempo: [0.000673]		Threads: [3]	Nested: [6]		Stop: [15]
        Tempo: [0.000673]		Threads: [3]	Nested: [3]		Stop: [15]
        Tempo: [0.000708]		Threads: [3]	Nested: [1]		Stop: [15]
        Tempo: [0.001181]		Threads: [3]	Nested: [100]		Stop: [7]
        Tempo: [0.000998]		Threads: [3]	Nested: [50]		Stop: [7]
        Tempo: [0.001008]		Threads: [3]	Nested: [25]		Stop: [7]
        Tempo: [0.000996]		Threads: [3]	Nested: [12]		Stop: [7]
        Tempo: [0.000984]		Threads: [3]	Nested: [6]		Stop: [7]
        Tempo: [0.000965]		Threads: [3]	Nested: [3]		Stop: [7]
        Tempo: [0.000943]		Threads: [3]	Nested: [1]		Stop: [7]
        Tempo: [0.000996]		Threads: [3]	Nested: [100]		Stop: [3]
        Tempo: [0.001025]		Threads: [3]	Nested: [50]		Stop: [3]
        Tempo: [0.001051]		Threads: [3]	Nested: [25]		Stop: [3]
        Tempo: [0.001001]		Threads: [3]	Nested: [12]		Stop: [3]
        Tempo: [0.000979]		Threads: [3]	Nested: [6]		Stop: [3]
        Tempo: [0.001108]		Threads: [3]	Nested: [3]		Stop: [3]
        Tempo: [0.001047]		Threads: [3]	Nested: [1]		Stop: [3]
        Tempo: [0.001382]		Threads: [3]	Nested: [100]		Stop: [1]
        Tempo: [0.001418]		Threads: [3]	Nested: [50]		Stop: [1]
        Tempo: [0.001385]		Threads: [3]	Nested: [25]		Stop: [1]
        Tempo: [0.001339]		Threads: [3]	Nested: [12]		Stop: [1]
        Tempo: [0.001362]		Threads: [3]	Nested: [6]		Stop: [1]
        Tempo: [0.001365]		Threads: [3]	Nested: [3]		Stop: [1]
        Tempo: [0.001417]		Threads: [3]	Nested: [1]		Stop: [1]
        Tempo: [0.001424]		Threads: [1]	Nested: [100]		Stop: [1000]
        Tempo: [0.001411]		Threads: [1]	Nested: [50]		Stop: [1000]
        Tempo: [0.001565]		Threads: [1]	Nested: [25]		Stop: [1000]
        Tempo: [0.001538]		Threads: [1]	Nested: [12]		Stop: [1000]
        Tempo: [0.001459]		Threads: [1]	Nested: [6]		Stop: [1000]
        Tempo: [0.001650]		Threads: [1]	Nested: [3]		Stop: [1000]
        Tempo: [0.001374]		Threads: [1]	Nested: [1]		Stop: [1000]
        Tempo: [0.001363]		Threads: [1]	Nested: [100]		Stop: [500]
        Tempo: [0.001514]		Threads: [1]	Nested: [50]		Stop: [500]
        Tempo: [0.001518]		Threads: [1]	Nested: [25]		Stop: [500]
        Tempo: [0.001342]		Threads: [1]	Nested: [12]		Stop: [500]
        Tempo: [0.001506]		Threads: [1]	Nested: [6]		Stop: [500]
        Tempo: [0.001487]		Threads: [1]	Nested: [3]		Stop: [500]
        Tempo: [0.001622]		Threads: [1]	Nested: [1]		Stop: [500]
        Tempo: [0.001579]		Threads: [1]	Nested: [100]		Stop: [250]
        Tempo: [0.001533]		Threads: [1]	Nested: [50]		Stop: [250]
        Tempo: [0.001374]		Threads: [1]	Nested: [25]		Stop: [250]
        Tempo: [0.001485]		Threads: [1]	Nested: [12]		Stop: [250]
        Tempo: [0.001543]		Threads: [1]	Nested: [6]		Stop: [250]
        Tempo: [0.001564]		Threads: [1]	Nested: [3]		Stop: [250]
        Tempo: [0.001512]		Threads: [1]	Nested: [1]		Stop: [250]
        Tempo: [0.001744]		Threads: [1]	Nested: [100]		Stop: [125]
        Tempo: [0.001559]		Threads: [1]	Nested: [50]		Stop: [125]
        Tempo: [0.001651]		Threads: [1]	Nested: [25]		Stop: [125]
        Tempo: [0.001729]		Threads: [1]	Nested: [12]		Stop: [125]
        Tempo: [0.001632]		Threads: [1]	Nested: [6]		Stop: [125]
        Tempo: [0.001723]		Threads: [1]	Nested: [3]		Stop: [125]
        Tempo: [0.001767]		Threads: [1]	Nested: [1]		Stop: [125]
        Tempo: [0.001536]		Threads: [1]	Nested: [100]		Stop: [62]
        Tempo: [0.001704]		Threads: [1]	Nested: [50]		Stop: [62]
        Tempo: [0.001717]		Threads: [1]	Nested: [25]		Stop: [62]
        Tempo: [0.001816]		Threads: [1]	Nested: [12]		Stop: [62]
        Tempo: [0.001651]		Threads: [1]	Nested: [6]		Stop: [62]
        Tempo: [0.001605]		Threads: [1]	Nested: [3]		Stop: [62]
        Tempo: [0.001619]		Threads: [1]	Nested: [1]		Stop: [62]
        Tempo: [0.001639]		Threads: [1]	Nested: [100]		Stop: [31]
        Tempo: [0.001632]		Threads: [1]	Nested: [50]		Stop: [31]
        Tempo: [0.001574]		Threads: [1]	Nested: [25]		Stop: [31]
        Tempo: [0.001696]		Threads: [1]	Nested: [12]		Stop: [31]
        Tempo: [0.001717]		Threads: [1]	Nested: [6]		Stop: [31]
        Tempo: [0.001866]		Threads: [1]	Nested: [3]		Stop: [31]
        Tempo: [0.001712]		Threads: [1]	Nested: [1]		Stop: [31]
        Tempo: [0.001630]		Threads: [1]	Nested: [100]		Stop: [15]
        Tempo: [0.001710]		Threads: [1]	Nested: [50]		Stop: [15]
        Tempo: [0.001731]		Threads: [1]	Nested: [25]		Stop: [15]
        Tempo: [0.001629]		Threads: [1]	Nested: [12]		Stop: [15]
        Tempo: [0.001803]		Threads: [1]	Nested: [6]		Stop: [15]
        Tempo: [0.001698]		Threads: [1]	Nested: [3]		Stop: [15]
        Tempo: [0.001661]		Threads: [1]	Nested: [1]		Stop: [15]
        Tempo: [0.001660]		Threads: [1]	Nested: [100]		Stop: [7]
        Tempo: [0.001608]		Threads: [1]	Nested: [50]		Stop: [7]
        Tempo: [0.001656]		Threads: [1]	Nested: [25]		Stop: [7]
        Tempo: [0.001753]		Threads: [1]	Nested: [12]		Stop: [7]
        Tempo: [0.001622]		Threads: [1]	Nested: [6]		Stop: [7]
        Tempo: [0.001714]		Threads: [1]	Nested: [3]		Stop: [7]
        Tempo: [0.001682]		Threads: [1]	Nested: [1]		Stop: [7]
        Tempo: [0.001659]		Threads: [1]	Nested: [100]		Stop: [3]
        Tempo: [0.001671]		Threads: [1]	Nested: [50]		Stop: [3]
        Tempo: [0.001680]		Threads: [1]	Nested: [25]		Stop: [3]
        Tempo: [0.001602]		Threads: [1]	Nested: [12]		Stop: [3]
        Tempo: [0.001701]		Threads: [1]	Nested: [6]		Stop: [3]
        Tempo: [0.002002]		Threads: [1]	Nested: [3]		Stop: [3]
        Tempo: [0.001736]		Threads: [1]	Nested: [1]		Stop: [3]
        Tempo: [0.001711]		Threads: [1]	Nested: [100]		Stop: [1]
        Tempo: [0.001656]		Threads: [1]	Nested: [50]		Stop: [1]
        Tempo: [0.001645]		Threads: [1]	Nested: [25]		Stop: [1]
        Tempo: [0.001688]		Threads: [1]	Nested: [12]		Stop: [1]
        Tempo: [0.001576]		Threads: [1]	Nested: [6]		Stop: [1]
        Tempo: [0.001707]		Threads: [1]	Nested: [3]		Stop: [1]
        Tempo: [0.001684]		Threads: [1]	Nested: [1]		Stop: [1]
    Dados para um array de tamanho 10000:
    Melhor tempo: [0.000529]
    Melhores parâmetros: Threads: [3]	Nested: [100]	Stop: [125]